
Week 14

Date : 03/04-07-2024

** 14.1 : Next.js **

Next.js is a popular React framework that simplifies the development of server-rendered React applications. It was introduced to address some of the challenges and inconveniences faced in traditional React development.

Problems addresses by Next.js

1. Separate Backend Project for API routes 
2. Routing
3. SEO Optimization
4. Waterfalling Problem

** Next.js Offerings :

1. Server Side Rendering
2. API routes
3. File based Routing
4. Bundle Size Optimizations
5. Maintained by the Vercel team

------------------ Routing in Next.js --------------------

Using File Based Router : Means the way you create your files describes what renders on a route.

For example if you create a folder named signup and it has page.tsx file then the route can be :

localhost:3000/signup

> signin
 - page.tsx
> signup
 - page.tsx

> page.tsx -- Root page
> globals.css -- Global css file
> layout.tsx -- Layouts in Next.js allows us to define shared UI components across multiple routes in your application.

** layout.tsx **

--> Layouts let you wrap all child pages inside some logic

- They provide a way to wrap child pages or nested layouts with common elemenrs such as headers,footers,sidebars or any other reusable UI components.

------------------------ layout.tsx -----------------

export default function RootLayout({
 children,
}: Readonly<{
   children: React.ReactNode;
}>){
 return(
 <body>
  <div className = "p-4 border-b">
   Medium
  </div>
  {children}
 </body>
);}

Now since Medium div tag is present in layout.tsx we will have it in all child pages
Here child pages are signin and signup


** Layouts in sub routes **

What if you wan’t all routes that start with /signin  to have a banner that says Login now to get 20% off

** Merging Routes **

What if you wan't to get the banner(same code) in both signup and signin pages ??

# Approach 1 :

Move both the signin and signup folder inside a auth folder where we have the layout.tsx file

> app
  > auth
   > signin
   > signup
   layout.tsx

-- You can access the routes at 

http://localhost:3000/auth/signup 
http://localhost:3000/auth/signin

# Approach 2 :

You can use create a new folder with () around the name. 
This folder is ignored by the router.

> app
  > (auth)
   > signin
   > signup
   layout.tsx

Now the auth is ignored by the router

-- You can access the routes at

 http://localhost:3000/signup 
 http://localhost:3000/signin

** components Directory **

-- You should put all your components in a components directory and use them in the app routes rather than shoving everything in the route handler

1. Create a new folder called components in the root of the project
2. Add a new component there called Signin.tsx
3. Move the signin logic there
4. Render the Signin component in app/(auth)signin/page.tsx

> components
 > Signin.tsx

export function Signin() {
 return <div></div>
}


> app
 > (auth)
  > Signin.tsx

import { Signin as SigninComponent } from "@/components/Signin";

export default function Signin() {
    return <SigninComponent />
}

-- When we try to add a onclick handler to the button on the signin page

<button onClick = {() => 
 console.log("Clicked")
}></button>

 --- When you tey to run after this is added you will get the below error

Error : Event Handlers cannot be passed to Client props.
<button>
If you need interactivity,consider converting part of this to a client component.

-- So we can understand from this error if we want to use button onclick handlers we have to convert it to a client component first otherwise we will get error.

** NextJS expects you to identify all your components as either client or server. **

1. Server components are rendered on the server.
2. Client components are pushed to the client to be rendered.

NOTE : By default in a NextJs application All components are ** Server components.**

--  If you want to mark a component as a client component , you need to add the following to the top of the component.


"use client"

** When should you create client components ? **

-- Whenever you get an error that tells you that you need to create a client component
-- Whenever you’re using something that the server doesn’t understand (useEffect, useState, onClick…)



















